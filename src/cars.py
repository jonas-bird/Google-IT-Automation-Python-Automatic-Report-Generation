#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    car_years = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # Calculate max sales
        item_sales = item["total_sales"]
        if item_sales > max_sales["total_sales"]:
            max_sales = item

        # TODO: also handle most popular car_year
        car_years[item["car"]["car_year"]] = car_years.get(
            item['car']['car_year'], 0) + int(item['total_sales'])

    year = max(car_year, key=car_year.get)

    summary = [
      "The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
      "The {} had the most sales:{}".format(
          format_car(max_sales["car"]), max_sales["total_sales"]),
      "The most popular year was {} with {} sales".format(
          year, car_years[year])
     ]

    return summary


def cars_dict_to_table(car_data):
   """Turns the data in car_data into a list of lists."""
    cols = [["ID", "Car", "Price", "Total Sales"]]
    car_list = []
    for item in car_data:
        car_list.append([item["id"], format_car(item["car"]), item["price"],
                           item["total_sales"]])
    car_list.sort(key=lambda x: int(x[0]), reverse=False)
    return cols + car_list


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    table_data = cars_dict_to_table(data)
    reports.generate("/tmp/cars.pdf", "Sales summary for last month <br/>",
                     "<br/>".join(summary), table_data)
    # TODO: send the PDF report as an email attachment
    message = emails.generate("automation@example.com", "student-04-3cd8df6fa80a@example.com",
                              "Sales summary for last month \n", "\n".join(summary), "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)
